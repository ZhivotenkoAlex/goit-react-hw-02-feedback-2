{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onFeedback","map","option","type","data-action","onClick","className","s","button","NotificationMessage","message","Section","title","children","Statistics","good","neutral","bad","total","percentageOfGoodFeedbacks","paragraph","App","state","totalQuantityOfFeedbacks","Math","round","onFeedbackIncrease","target","dataset","action","setState","prevState","this","totalFedbacks","goodFeedbacks","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"ySAuCeA,EAnCO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OAChB,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBACIC,KAAK,SACLC,cAAaF,EACbG,QAASL,EACTM,UAAYC,IAAEC,OAJlB,SAMSN,GADAA,SCFNO,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC3B,OAAO,4BAAIA,KCWAC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,gCACI,6BAAKD,IACJC,M,gBCkBMC,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,0BAA9B,OAEf,gCAEI,oBAAGb,UAAWC,IAAEa,UAAhB,oBAAmCL,KACnC,oBAAGT,UAAWC,IAAEa,UAAhB,uBAAsCJ,KACtC,oBAAGV,UAAWC,IAAEa,UAAhB,mBAAkCH,KAClC,oBAAGX,UAAWC,IAAEa,UAAhB,sBAAqCF,KACrC,oBAAGZ,UAAWC,IAAEa,UAAhB,iCAAgDD,EAAhD,WCmDOE,G,kNArDbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,yBAA2B,WAAO,IAAD,EACA,EAAKD,MAGpC,OAJ+B,EACvBP,KADuB,EACjBC,QADiB,EACRC,K,EAMzBE,0BAA4B,WAC1B,IAAMD,EAAQ,EAAKK,2BACXR,EAAS,EAAKO,MAAdP,KAER,OADyBG,EAAQM,KAAKC,MAAOV,EAAOG,EAAS,KAAO,G,EAItEQ,mBAAqB,YAAiB,IAC9BvB,EAD6B,EAAbwB,OACFC,QAAQC,OAC5B,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAG5B,EAAO4B,EAAU5B,GAAQ,O,uDAI7B,IAAD,EAEwB6B,KAAKV,MAA5BP,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IAEjBgB,EAAgBD,KAAKT,2BACrBW,EAAgBF,KAAKb,4BAG3B,OACE,qCACE,cAAC,EAAD,CAASP,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBb,QARP,CAAC,OAAQ,UAAU,OAQMC,WAAYgC,KAAKN,uBAItD,cAAC,EAAD,CAASd,MAAO,aAAhB,SACGG,GAAQC,GAAWC,EAClB,cAAC,EAAD,CAAYF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOe,EAAed,0BAA2Be,IAAoB,cAAC,EAAD,CAAqBxB,QAAQ,0C,GA7ChJyB,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,gC,kBCA9BD,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.636bec16.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions=({ options, onFeedback })=> (\r\n      <div>\r\n        {options.map(option => (\r\n            <button\r\n                type=\"button\"\r\n                data-action={option}\r\n                onClick={onFeedback}\r\n                className= {s.button}\r\n                key={option}>\r\n                    {option}\r\n            </button>\r\n        ))}\r\n    </div>\r\n\r\n    // <div>\r\n    //     <h1>Please leave feedback</h1>\r\n    //     <div>\r\n    //         {/* {itemName.map(item => (\r\n    //             <p> <button onClick={() => onFeedback(item)} className=\"button good\" type=\"button\">{getItemName(item)}{ ' '}</button></p>\r\n    //         ))} */}\r\n    //         <button onClick={() => onFeedback(status)} className=\"button good\" type=\"button\">Good</button>\r\n    //         <button onClick={() => onFeedback(status)} className=\"button neutral\" type=\"button\">Neutral</button>\r\n    //         <button onClick={() => onFeedback(status)} className=\"button bad\" type=\"button\">Bad</button>\r\n    //     </div>\r\n    //     <h2>Statistics</h2>\r\n    //     <p>Good:</p>\r\n    //     <p>Neutral:</p>\r\n    //     <p>Bad:</p></div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n    onFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nfunction NotificationMessage({ message }) {\r\n    return <p>{message}</p>;\r\n};\r\n\r\nNotificationMessage.propTypes={\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default NotificationMessage;","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.element\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percentageOfGoodFeedbacks }) => (\r\n    \r\n    <div>\r\n       \r\n        <p className={s.paragraph}>Good : {good}</p>\r\n        <p className={s.paragraph}>Neutral : {neutral}</p>\r\n        <p className={s.paragraph}>Bad : {bad}</p>\r\n        <p className={s.paragraph}>Total  : {total}</p>\r\n        <p className={s.paragraph}>Positive feedback : {percentageOfGoodFeedbacks}%</p>\r\n    </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    percentageOfGoodFeedbacks: PropTypes.number.isRequired,\r\n};\r\n    \r\nexport default Statistics;","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport NotificationMessage from './components/NotificationMessage/NotificationMessage';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  totalQuantityOfFeedbacks = () => {\n    const { good, neutral, bad } = this.state;\n\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  percentageOfGoodFeedbacks = () => {\n    const total = this.totalQuantityOfFeedbacks();\n    const { good } = this.state;\n    const percentageOfGood = total ? Math.round((good / total) * 100) : 0;\n    return percentageOfGood;\n  };\n\n  onFeedbackIncrease = ({ target }) => {\n    const type = target.dataset.action;\n    this.setState(prevState => {\n      return { [type]: prevState[type] + 1 };\n    });\n  };\n   \n  render() {\n\n    const { good, neutral, bad } = this.state;\n    const options = ['good', 'neutral','bad'];\n    const totalFedbacks = this.totalQuantityOfFeedbacks();\n    const goodFeedbacks = this.percentageOfGoodFeedbacks();\n\n\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions options={options} onFeedback={this.onFeedbackIncrease}>\n          </FeedbackOptions>\n        </Section>\n\n        <Section title={'Statistics'}>\n          {good || neutral || bad ? (\n            <Statistics good={good} neutral={neutral} bad={bad} total={totalFedbacks} percentageOfGoodFeedbacks={goodFeedbacks}/>): (<NotificationMessage message='There is no one feedback yet'/>)\n          }\n        </Section>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Statistics_paragraph__1BAxz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3wTUz\"};"],"sourceRoot":""}